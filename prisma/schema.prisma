// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

enum ContentType {
  MOVIE
  SERIES
  DOCUMENTARY
}

enum Role {
  JUNIOR
  MEDIOR
  SENIOR
}

enum AgeRating {
  G
  PG
  PG_13
  R
  NC_17
}

enum PaymentStatus {
  PAID
  UNPAID
  PENDING
}

model Genre {
  id              String            @id @default(uuid())
  name            String            @unique @db.VarChar(50)
  ContentMetadata ContentMetadata[]

  @@index([name])
}

model ContentRating {
  id              String            @id @default(uuid())
  ratingType      String            @unique @map("rating_type") @db.VarChar(20)
  ContentMetadata ContentMetadata[]

  @@index([ratingType])
}

model Content {
  id                String            @id @default(uuid())
  title             String            @db.VarChar(255)
  durationInSeconds Int               @db.Integer
  releaseDate       DateTime          @map("release_date") @db.Date
  season            Int?              @db.SmallInt
  qualityId         String?           @map("quality_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  ContentMetadata   ContentMetadata[]
  ViewingHistory    ViewingHistory[]
  Watchlist         Watchlist[]

  @@index([title])
  @@index([releaseDate])
}

model Language {
  id              String            @id @default(uuid())
  language        String            @unique @db.VarChar(50)
  Subtitle        Subtitle[]
  ContentMetadata ContentMetadata[]

  @@index([language])
}

model Subtitle {
  id              String            @id @default(uuid())
  languageId      String            @map("language_id")
  content         String            @db.Text
  language        Language          @relation(fields: [languageId], references: [id], onDelete: Cascade)
  ContentMetadata ContentMetadata[]

  @@index([languageId])
}

model ContentMetadata {
  id              String      @id @default(uuid())
  title           String?     @db.VarChar(255)
  genreId         String?     @map("genre_id")
  rating          Int?        @db.SmallInt
  contentId       String      @map("content_id")
  languageId      String?     @map("language_id")
  subtitleId      String?     @map("subtitle_id")
  contentType     ContentType @map("content_type")
  contentRatingId String?     @map("content_rating_id")
  ageRating       AgeRating   @map("age_rating")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  genre         Genre?         @relation(fields: [genreId], references: [id], onDelete: SetNull)
  content       Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  language      Language?      @relation(fields: [languageId], references: [id], onDelete: SetNull)
  subtitle      Subtitle?      @relation(fields: [subtitleId], references: [id], onDelete: SetNull)
  contentRating ContentRating? @relation(fields: [contentRatingId], references: [id], onDelete: SetNull)

  @@index([contentId, contentType])
  @@index([genreId, ageRating])
}

model NetflixAccount {
  id                    String                 @id @default(uuid())
  email                 String                 @unique @db.VarChar(255)
  password              String                 @db.VarChar(255)
  activated             Boolean                @default(false)
  blockedUntil          DateTime?              @map("blocked_until")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  Profile               Profile[]
  PreviousPasswordHash  PreviousPasswordHash[]
  Subscription          Subscription[]
  ReferredSubscriptions Subscription[]         @relation("Referral")

  @@index([email, activated])
}

model PreviousPasswordHash {
  id           String         @id @default(uuid())
  accountId    String         @map("account_id")
  passwordHash String         @map("password_hash") @db.VarChar(255)
  createdAt    DateTime       @default(now()) @map("created_at")
  account      NetflixAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, createdAt])
}

model Profile {
  id             String           @id @default(uuid())
  accountId      String           @map("account_id")
  name           String           @db.VarChar(100)
  profileImage   String?          @map("profile_image") @db.VarChar(255)
  dateOfBirth    DateTime         @map("date_of_birth") @db.Date
  language       String           @default("en") @db.VarChar(5)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  account        NetflixAccount   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  ViewingHistory ViewingHistory[]
  Watchlist      Watchlist[]

  @@index([accountId, name])
}

model SubscriptionType {
  id               String         @id @default(uuid())
  type             String         @unique @db.VarChar(50)
  priceInEuroCents Int            @default(0) @map("price_in_euro_cents")
  Subscription     Subscription[]

  @@index([type])
}

model Subscription {
  id                 String   @id @default(uuid())
  beginDate          DateTime @map("begin_date") @db.Date
  endDate            DateTime @map("end_date") @db.Date
  accountId          String   @map("account_id")
  subscriptionTypeId String   @map("subscription_type_id")
  referralId         String?  @map("referral_id")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  account          NetflixAccount   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  subscriptionType SubscriptionType @relation(fields: [subscriptionTypeId], references: [id], onDelete: Restrict)
  referredBy       NetflixAccount?  @relation("Referral", fields: [referralId], references: [id], onDelete: SetNull)
  Invoice          Invoice[]

  @@index([accountId, endDate])
  @@index([subscriptionTypeId, beginDate])
}

model Invoice {
  id             String        @id @default(uuid())
  subscriptionId String        @map("subscription_id")
  isPaid         PaymentStatus @default(PENDING) @map("is_paid")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, isPaid])
}

model ViewingHistory {
  id                 String   @id @default(uuid())
  profileId          String   @map("profile_id")
  contentId          String   @map("content_id")
  watchDate          DateTime @default(now()) @map("watch_date")
  progressPercentage Float    @map("progress_percentage") @db.Real
  profile            Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  content            Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@index([profileId, watchDate])
  @@index([contentId, progressPercentage])
}

model Watchlist {
  id        String   @id @default(uuid())
  profileId String   @map("profile_id")
  contentId String   @map("content_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([profileId, contentId])
  @@index([createdAt])
}

// authentication

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  role          Role      @default(JUNIOR)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  apiKey        apiKey?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model apiKey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  apiKey String @unique @default(cuid()) @map("api_key")
}
